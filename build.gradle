plugins {
	id 'org.springframework.boot' version '2.5.4'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'jacoco'
}

group = 'com.nik.news.articles'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	runtimeOnly 'com.h2database:h2'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named("jacocoTestReport") {
	enabled = true
}

// Share sources folder with other projects for aggregated JaCoCo reports
configurations.create('transitiveSourcesElements') {
	visible = false
	canBeResolved = false
	canBeConsumed = true
	extendsFrom(configurations.implementation)
	attributes {
		attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
		attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.DOCUMENTATION))
		attribute(DocsType.DOCS_TYPE_ATTRIBUTE, objects.named(DocsType, 'source-folders'))
	}
	sourceSets.main.java.srcDirs.forEach {
		outgoing.artifact(it)
	}
}

// Share the coverage data to be aggregated for the whole product
configurations.create('coverageDataElements') {
	visible = false
	canBeResolved = false
	canBeConsumed = true
	extendsFrom(configurations.implementation)
	attributes {
		attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
		attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.DOCUMENTATION))
		attribute(DocsType.DOCS_TYPE_ATTRIBUTE, objects.named(DocsType, 'jacoco-coverage-data'))
	}
	// This will cause the test task to run if the coverage data is requested by the aggregation task
	outgoing.artifact(tasks.named("test").map { task ->
		task.extensions.getByType(JacocoTaskExtension).destinationFile
	})
}


test {
	useJUnitPlatform()
}
